---
title: "Theoretical peptides"
author: "Christopher Hughes"
format: html
editor: visual
---

## Details

This document describes processing a fasta database to get a count for the number of theoretical peptides.

## Setting up the environment

These are packages you will need for this notebook. For exact versions used, please refer to the session info at the bottom of this notebook.

```{r}
#| message: false
#| warning: false
##########################################################################################
library('tidyverse')
library('Peptides')
library('OrgMassSpecR')
library('Biostrings')
```

I want to set a base directory that we can use for our analysis.

```{r}
##########################################################################################
baseRepository = 'E:/requests/1172/250205_1172_orbitrapLumos'
```

## Data processing

Modify the digest function to allow for LysC.

```{r}
##########################################################################################
modDigest = function (sequence, enzyme = "trypsin", missed = 0, IAA = TRUE, 
    N15 = FALSE, custom = list()) 
{
    seq_vector <- strsplit(sequence, split = "")[[1]]
    end_position <- length(seq_vector)
    if (enzyme == "trypsin") {
        if (seq_vector[end_position] == "K" | seq_vector[end_position] == 
            "R") {
            seq_vector[end_position] <- "!"
            seq_string <- paste(seq_vector, collapse = "")
        }
        else seq_string <- sequence
        seq_string <- gsub("KP", "!P", seq_string)
        seq_string <- gsub("RP", "!P", seq_string)
        seq_vector <- strsplit(seq_string, split = "")[[1]]
        stop <- grep("K|R", seq_vector)
        start <- stop + 1
    }
    if (enzyme == "lysC") {
        if (seq_vector[end_position] == "K") {
            seq_vector[end_position] <- "!"
            seq_string <- paste(seq_vector, collapse = "")
        }
        else seq_string <- sequence
        seq_string <- gsub("KP", "!P", seq_string)
        seq_vector <- strsplit(seq_string, split = "")[[1]]
        stop <- grep("K", seq_vector)
        start <- stop + 1
    }
    if (enzyme == "trypsin.strict") {
        if (seq_vector[end_position] == "K" | seq_vector[end_position] == 
            "R") {
            seq_vector[end_position] <- "!"
            seq_string <- paste(seq_vector, collapse = "")
        }
        else seq_string <- sequence
        seq_vector <- strsplit(seq_string, split = "")[[1]]
        stop <- grep("K|R", seq_vector)
        start <- stop + 1
    }
    if (enzyme == "pepsin") {
        if (seq_vector[end_position] == "F" | seq_vector[end_position] == 
            "L" | seq_vector[end_position] == "W" | seq_vector[end_position] == 
            "Y" | seq_vector[end_position] == "A" | seq_vector[end_position] == 
            "E" | seq_vector[end_position] == "Q") {
            seq_vector[end_position] <- "!"
        }
        stop <- grep("F|L|W|Y|A|E|Q", seq_vector)
        start <- stop + 1
    }
    if (enzyme != "trypsin" & enzyme != "trypsin.strict" & enzyme != 
        "pepsin" & enzyme != "lysC") 
        stop("undefined enzyme, defined enzymes are trypsin, trypsin.strict, and pepsin")
    if (length(stop) == 0) 
        warning("sequence does not contain cleavage sites")
    if (missed > length(stop)) 
        stop("number of specified missed cleavages is greater than the maximum possible")
    cleave <- function(sequence, start, stop, misses) {
        peptide <- substring(sequence, start, stop)
        mc <- rep(misses, times = length(peptide))
        result <- data.frame(peptide, start, stop, mc, stringsAsFactors = FALSE)
        return(result)
    }
    start <- c(1, start)
    stop <- c(stop, end_position)
    results <- cleave(sequence, start, stop, 0)
    if (missed > 0) {
        for (i in 1:missed) {
            start_tmp <- start[1:(length(start) - i)]
            stop_tmp <- stop[(1 + i):length(stop)]
            peptide <- cleave(sequence, start_tmp, stop_tmp, 
                i)
            results <- rbind(results, peptide)
        }
    }
    C <- 12
    H <- 1.0078250321
    O <- 15.9949146221
    S <- 31.97207069
    N <- ifelse(N15 == TRUE, 15.0001088984, 14.0030740052)
    proton <- 1.007276466
    residueMass <- function(residue) {
        if (residue == "A") 
            mass = C * 3 + H * 5 + N + O
        if (residue == "R") 
            mass = C * 6 + H * 12 + N * 4 + O
        if (residue == "N") 
            mass = C * 4 + H * 6 + N * 2 + O * 2
        if (residue == "D") 
            mass = C * 4 + H * 5 + N + O * 3
        if (residue == "E") 
            mass = C * 5 + H * 7 + N + O * 3
        if (residue == "Q") 
            mass = C * 5 + H * 8 + N * 2 + O * 2
        if (residue == "G") 
            mass = C * 2 + H * 3 + N + O
        if (residue == "H") 
            mass = C * 6 + H * 7 + N * 3 + O
        if (residue == "I") 
            mass = C * 6 + H * 11 + N + O
        if (residue == "L") 
            mass = C * 6 + H * 11 + N + O
        if (residue == "K") 
            mass = C * 6 + H * 12 + N * 2 + O
        if (residue == "M") 
            mass = C * 5 + H * 9 + N + O + S
        if (residue == "F") 
            mass = C * 9 + H * 9 + N + O
        if (residue == "P") 
            mass = C * 5 + H * 7 + N + O
        if (residue == "S") 
            mass = C * 3 + H * 5 + N + O * 2
        if (residue == "T") 
            mass = C * 4 + H * 7 + N + O * 2
        if (residue == "W") 
            mass = C * 11 + H * 10 + N * 2 + O
        if (residue == "Y") 
            mass = C * 9 + H * 9 + N + O * 2
        if (residue == "V") 
            mass = C * 5 + H * 9 + N + O
        if (residue == "C" & IAA == FALSE) 
            mass = C * 3 + H * 5 + N + O + S
        if (residue == "C" & IAA == TRUE) 
            mass <- ifelse(N15 == FALSE, C * 5 + H * 8 + N * 
                2 + O * 2 + S, C * 5 + H * 8 + N + 14.0030740052 + 
                O * 2 + S)
        if (length(custom) != 0) 
            for (i in 1:length(custom$code)) if (residue == custom$code[i]) 
                mass = custom$mass[i]
        return(mass)
    }
    mz <- vector("list", length = nrow(results))
    for (i in 1:nrow(results)) {
        peptide_vector <- strsplit(results$peptide[i], split = "")[[1]]
        peptide_mass <- sum(sapply(peptide_vector, residueMass))
        mz[[i]] <- round((peptide_mass + H * 2 + O + (c(1, 2, 
            3) * proton))/c(1, 2, 3), digits = 3)
    }
    mz <- as.data.frame(do.call("rbind", mz))
    names(mz) <- c("mz1", "mz2", "mz3")
    results <- cbind(results, mz)
    return(results)
}

```

Process the contaminants database.

```{r}
##########################################################################################
##crap database processing
fastaDb = readAAStringSet(paste(baseRepository,'/databases/crap_2024_01_15.fasta',sep=''))

##define an index for each entry
fastaIndex = tibble('metadata' = names(fastaDb)) %>%
  dplyr::mutate(accession = paste('sp|CONT', seq(1,nrow(.),1), '|', sub('sp\\|(.*)\\|','\\1', metadata), ' GN=', sub('sp\\|(.*)_.*','\\1', metadata), sep=''))
fastaDbEdited = fastaDb
names(fastaDbEdited) = fastaIndex$accession
toKeep = data.frame(name = names(fastaDbEdited)[which(!grepl('HUMAN', names(fastaDbEdited)))])
fastaSubset = fastaDbEdited[toKeep$name]


##make an index that matches the human one
fastaIndexMatch = fastaIndex %>%
  dplyr::filter(!grepl('HUMAN',accession)) %>%
  dplyr::rename(parsed = 'accession') %>%
  dplyr::mutate(accession = sub('sp\\|(.*)\\|.*','\\1',parsed),
                gene = sub('.*GN\\=(.*)','\\1',parsed),
                length = width(fastaSubset)) %>%
  dplyr::mutate(species = 'contaminant') %>%
  dplyr::select(accession, gene, length, species)

##save this index  
saveRDS(fastaIndexMatch, paste(baseRepository, '/databases/crap_2024_01_15_noHuman_index.rds',sep=''))

##loop through the database entries and calculate tryptic peptide numbers
trypticPeptides = vector()
detectableLength = vector()
for (i in 1:length(fastaSubset)){
  #get the protein sequence
  aaSeq = as.character(fastaSubset[[i]])
  #digest the protein sequence...sometimes there are weird amino acids, so we assign them random masses
  seqDigest = modDigest(aaSeq, enzyme = 'lysC', missed = 0, custom = list(code = c('X','U','Z','B'), mass = c(50, 60, 70, 80)))
  #calculate the total length of the protein
  seqDigest$pepLength = (seqDigest$stop - seqDigest$start) + 1
  #subset the set of digested peptides based on what we normally detect in an MS experiment
  seqDigestSub = subset(seqDigest, (seqDigest$pepLength > 5) & (seqDigest$pepLength < 31))
  #add to the tryptic peptides vector
  trypticPeptides = c(trypticPeptides, nrow(seqDigestSub))
  #add to the detectable length vector
  detectableLength = c(detectableLength, sum(seqDigestSub$pepLength, na.rm = TRUE))
  #output a message
  message(paste('Finished ', i, ' proteins.', sep = ''))
}


##add the output to our previously generated index
fastaIndexMatch$detectablePeptides = trypticPeptides
fastaIndexMatch$detectableLength = detectableLength


##save the file
saveRDS(fastaIndexMatch, paste(baseRepository, '/databases/crap_2024_01_15_noHuman_index_trypticPeps.rds',sep=''))
writeXStringSet(fastaSubset, paste(baseRepository, '/databases/crap_2024_01_15_noHuman.fasta',sep=''))
```

For the viral database of AUG starts provided to me by Eric Pringle.

```{r}
##########################################################################################
##viral database processing
fastaDb = readAAStringSet(paste(baseRepository,'/databases/KSHV_AUG_with_kaposins_86Sequences.fasta',sep=''))

##define an index for each entry
fastaIndex = tibble('metadata' = names(fastaDb)) %>%
  mutate(accession = paste('sp|V', seq(10001,10000+nrow(.),1), '|VIRUS', seq(1,nrow(.),1), '_HUMAN ', 'GN=VIRUS', seq(1,nrow(.),1), sep=''))

##add this index to the original database and rewrite it
names(fastaDb) = fastaIndex$accession
writeXStringSet(fastaDb, paste(baseRepository,'/databases/KSHV_AUG_with_kaposins_86Sequences_reannotated.fasta', sep=''))


##make an index that matches the human one
fastaIndexMatch = fastaIndex %>%
  dplyr::rename(parsed = 'accession') %>%
  dplyr::mutate(accession = sub('sp\\|(.*)\\|.*','\\1',parsed),
                gene = sub('.*GN\\=(.*)','\\1',parsed),
                length = width(fastaDb)) %>%
  dplyr::mutate(species = 'virus') %>%
  dplyr::select(accession, gene, length, species)



##loop through the database entries and calculate tryptic peptide numbers
trypticPeptides = vector()
detectableLength = vector()
for (i in 1:length(fastaDb)){
  #get the protein sequence
  aaSeq = as.character(fastaDb[[i]])
  #digest the protein sequence...sometimes there are weird amino acids, so we assign them random masses
  seqDigest = modDigest(aaSeq, enzyme = 'lysC', missed = 0, custom = list(code = c('X','U','Z','B'), mass = c(50, 60, 70, 80)))
  #calculate the total length of the protein
  seqDigest$pepLength = (seqDigest$stop - seqDigest$start) + 1
  #subset the set of digested peptides based on what we normally detect in an MS experiment
  seqDigestSub = subset(seqDigest, (seqDigest$pepLength > 5) & (seqDigest$pepLength < 31))
  #add to the tryptic peptides vector
  trypticPeptides = c(trypticPeptides, nrow(seqDigestSub))
  #add to the detectable length vector
  detectableLength = c(detectableLength, sum(seqDigestSub$pepLength, na.rm = TRUE))
  #output a message
  message(paste('Finished ', i, ' proteins.', sep = ''))
}


##add the output to our previously generated index
fastaIndexMatch$detectablePeptides = trypticPeptides
fastaIndexMatch$detectableLength = detectableLength
fastaIndexMatch$pringleId = fastaIndex$metadata

##save the file
saveRDS(fastaIndexMatch, paste(baseRepository, '/databases/KSHV_AUG_with_kaposins_86Sequences_index_trypticPeps.rds',sep=''))
```

Go to FragPipe and download the human database appended with this new contaminant one. Uncheck the boxes for decoys and contaminants. Add the contaminant database generated above as a spike-in. After that, we will process the downloaded file using the code below.

Process the fasta database.

```{r}
##########################################################################################
##read in the fasta file
fastaFileName = '2025-02-07-reviewed-UP000005640-spikein.fasta'
fastaDb = readAAStringSet(paste(baseRepository,'/databases/', fastaFileName, sep=''))


##the snippet below
fastaIndex = tibble('metadata' = names(fastaDb)) %>%
  dplyr::mutate(length = width(fastaDb)) %>%
  #dplyr::filter(!grepl('contam_sp', metadata) & !grepl('rev_sp', metadata)) %>%
  dplyr::mutate(accession = sub(".*[sptr]\\|(.*)\\|.*$", "\\1", metadata)) %>%
  dplyr::mutate(gene = ifelse(grepl('GN=', metadata), sub(".*GN=(.*) [PE].*$", "\\1", metadata), NA)) %>%
  dplyr::mutate(species = ifelse(grepl('sapiens', metadata), 'human', 
                             ifelse(grepl('\\=9606', metadata), 'human',
                                    ifelse(grepl('musculus', metadata), 'mouse', 'other')))) %>%
  dplyr::select(accession, gene, length, species)

##save this file as a general index
saveRDS(fastaIndex, paste(baseRepository, '/databases/',fastaFileName,'_index.rds',sep=''))



##loop through the database entries and calculate tryptic peptide numbers
trypticPeptides = vector()
detectableLength = vector()
for (i in 1:length(fastaDb)){
  #get the protein sequence
  aaSeq = as.character(fastaDb[[i]])
  #digest the protein sequence...sometimes there are weird amino acids, so we assign them random masses
  seqDigest = modDigest(aaSeq, enzyme = 'lysC', missed = 0, custom = list(code = c('X','U','Z','B'), mass = c(50, 60, 70, 80)))
  #calculate the total length of the protein
  seqDigest$pepLength = (seqDigest$stop - seqDigest$start) + 1
  #subset the set of digested peptides based on what we normally detect in an MS experiment
  seqDigestSub = subset(seqDigest, (seqDigest$pepLength > 5) & (seqDigest$pepLength < 31))
  #add to the tryptic peptides vector
  trypticPeptides = c(trypticPeptides, nrow(seqDigestSub))
  #add to the detectable length vector
  detectableLength = c(detectableLength, sum(seqDigestSub$pepLength, na.rm = TRUE))
  #output a message
  message(paste('Finished ', i, ' proteins.', sep = ''))
}


##add the output to our previously generated index
fastaIndex$detectablePeptides = trypticPeptides
fastaIndex$detectableLength = detectableLength


##save the file
saveRDS(fastaIndex, paste(baseRepository, '/databases/',fastaFileName,'_index_trypticPeps.rds',sep=''))
```

After the database is parsed, you can add decoys in FragPipe. If you are going to use it with DIA-NN, there is no need to add decoys. Finished here for now.

## Session info

```{r}
##########################################################################################
sessionInfo()
```

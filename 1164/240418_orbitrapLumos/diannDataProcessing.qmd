---
title: "diannDataProcessing"
author: "Christopher Hughes"
format: html
editor: visual
---

## Details

This document describes processing of proteomics data from DIANN to compile a final protein set.

## Setting up the environment

These are packages you will need for this notebook. For exact versions used, please refer to the session info at the bottom of this notebook.

```{r}
#| message: false
#| warning: false
##########################################################################################
library('tidyverse')
library('iq')
library('DEqMS')
library('RColorBrewer')
library('ggrepel')
```

I want to set a base directory that we can use as a working space.

```{r}
##########################################################################################
baseRepository = 'E:/requests/1164/240418_orbitrapLumos'
```

## Data processing

Set up the datasets of interest.

```{r}
##########################################################################################
##PMPs (light only)
set1Names = c(paste('sample',seq(10,50,10),'_L',sep=''))

##MB231 (24h) (mix of medium and heavy)
set2Names = c(paste('sample',seq(11,51,10),'_M',sep=''),paste('sample',seq(11,51,10),'_H',sep=''))
set2MedNames = c(paste('sample',seq(11,51,10),'_M',sep=''))

##MB231 + PMPs (24h) (mix of all)
set3Names = c(paste('sample',seq(12,52,10),'_L',sep=''), paste('sample',seq(12,52,10),'_M',sep=''),paste('sample',seq(12,52,10),'_H',sep=''))
set3MedNames = c(paste('sample',seq(12,52,10),'_M',sep=''))

##MB231 (48h) (mix of medium and heavy)
set4Names = c(paste('sample',seq(13,53,10),'_M',sep=''),paste('sample',seq(13,53,10),'_H',sep=''))
set4MedNames = c(paste('sample',seq(13,53,10),'_M',sep=''))

##MB231 + PMPs (48h) (mix of all)
set5Names = c(paste('sample',seq(14,54,10),'_L',sep=''), paste('sample',seq(14,54,10),'_M',sep=''),paste('sample',seq(14,54,10),'_H',sep=''))
set5MedNames = c(paste('sample',seq(14,54,10),'_M',sep=''))
```

Process the initial light only PMP samples.

```{r}
##########################################################################################
##dia1
dia1 = read_tsv(paste(baseRepository, '/diannDia1/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia1)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia1)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia1)[11:85]),sep='')
##dia2
dia2 = read_tsv(paste(baseRepository, '/diannDia2/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia2)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia2)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia2)[11:85]),sep='')
##dia3
dia3 = read_tsv(paste(baseRepository, '/diannDia3/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia3)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia3)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia3)[11:85]),sep='')
##combine
diaSet = rbind(dia1, dia2, dia3) %>%
  dplyr::filter(!grepl(';',Protein.Group))

##keep only the labels of interest
diaSetSub1 = diaSet[,c(colnames(diaSet)[1:10],set1Names)]
diaSetSub1[,11:15][diaSetSub1[,11:15]==0] = NA
diaSetSub1$missing = rowSums(is.na(diaSetSub1[,11:15]))
diaSetSub1 = dplyr::filter(diaSetSub1, missing <= 2)
table(diaSetSub1$missing)
diaSetSub1[,11:15] = log2(diaSetSub1[,11:15])
boxplot(log2(diaSetSub1[,11:15]))

##roll into proteins
##read in the human index
annotationDb = readRDS(paste(baseRepository, '/databases/2024-04-24-reviewed-UP000005640-spikein.fasta_index_trypticPeps.rds',sep='')) %>%
  dplyr::select(-species) %>%
  dplyr::filter(!grepl('sp\\|V.*',gene))
#
diaSetPsms = diaSetSub1 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene, sample10_L:sample50_L) %>%
  dplyr::mutate(numPeps = 1) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise_at(c('numPeps'), sum, na.rm = TRUE)
#
diaSetAbundance = diaSetSub1 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene, sample10_L:sample50_L) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise_at(c(set1Names), median, na.rm = TRUE) %>%
  dplyr::left_join(diaSetPsms) %>%
  dplyr::left_join(annotationDb)

##save the data
saveRDS(diaSetAbundance, paste(baseRepository, '/dataProcessing/pmpOnly_parsedProteinData.rds', sep = ''))
write.table(diaSetAbundance, paste(baseRepository, '/dataProcessing/pmpOnly_parsedProteinData.tsv', sep = ''), 
            col.names = TRUE, row.names = FALSE, quote = FALSE, sep = '\t')

```

Process the MB231 24h samples.

```{r}
##########################################################################################
##dia1
dia1 = read_tsv(paste(baseRepository, '/diannDia1/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia1)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia1)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia1)[11:85]),sep='')
##dia2
dia2 = read_tsv(paste(baseRepository, '/diannDia2/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia2)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia2)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia2)[11:85]),sep='')
##dia3
dia3 = read_tsv(paste(baseRepository, '/diannDia3/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia3)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia3)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia3)[11:85]),sep='')
##combine
diaSet = rbind(dia1, dia2, dia3) %>%
  dplyr::filter(!grepl(';',Protein.Group))

##keep only the labels of interest
diaSetSub1 = diaSet[,c(colnames(diaSet)[1:10],set2Names)]
diaSetSub1[,11:20][diaSetSub1[,11:20]==0] = NA
diaSetSub1$missingSet1 = rowSums(is.na(diaSetSub1[,11:15]))
diaSetSub1$missingSet2 = rowSums(is.na(diaSetSub1[,16:20]))
diaSetSub1 = dplyr::filter(diaSetSub1, missingSet1 <= 2 | missingSet2 <=2)
table(diaSetSub1$missing)
diaSetSub1[,11:20] = log2(diaSetSub1[,11:20])
boxplot(log2(diaSetSub1[,11:20]))

##roll into proteins
##read in the human index
annotationDb = readRDS(paste(baseRepository, '/databases/2024-04-24-reviewed-UP000005640-spikein.fasta_index_trypticPeps.rds',sep='')) %>%
  dplyr::select(-species) %>%
  dplyr::filter(!grepl('sp\\|V.*',gene))
#
diaSetPsms = diaSetSub1 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene, sample11_M:sample51_H) %>%
  dplyr::mutate(numPeps = 1) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise_at(c('numPeps'), sum, na.rm = TRUE)
#
diaSetAbundance = diaSetSub1 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene, sample11_M:sample51_H) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise_at(c(set2Names), median, na.rm = TRUE) %>%
  dplyr::left_join(diaSetPsms) %>%
  dplyr::left_join(annotationDb)

##save the data
saveRDS(diaSetAbundance, paste(baseRepository, '/dataProcessing/mb231-24h_parsedProteinData.rds', sep = ''))
write.table(diaSetAbundance, paste(baseRepository, '/dataProcessing/mb231-24h_parsedProteinData.tsv', sep = ''), 
            col.names = TRUE, row.names = FALSE, quote = FALSE, sep = '\t')

```

Process the MB231 48h samples.

```{r}
##########################################################################################
##dia1
dia1 = read_tsv(paste(baseRepository, '/diannDia1/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia1)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia1)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia1)[11:85]),sep='')
##dia2
dia2 = read_tsv(paste(baseRepository, '/diannDia2/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia2)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia2)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia2)[11:85]),sep='')
##dia3
dia3 = read_tsv(paste(baseRepository, '/diannDia3/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia3)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia3)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia3)[11:85]),sep='')
##combine
diaSet = rbind(dia1, dia2, dia3) %>%
  dplyr::filter(!grepl(';',Protein.Group))

##keep only the labels of interest
diaSetSub1 = diaSet[,c(colnames(diaSet)[1:10],set4Names)]
diaSetSub1[,11:20][diaSetSub1[,11:20]==0] = NA
diaSetSub1$missingSet1 = rowSums(is.na(diaSetSub1[,11:15]))
diaSetSub1$missingSet2 = rowSums(is.na(diaSetSub1[,16:20]))
diaSetSub1 = dplyr::filter(diaSetSub1, missingSet1 <= 2 | missingSet2 <=2)
table(diaSetSub1$missing)
diaSetSub1[,11:20] = log2(diaSetSub1[,11:20])
boxplot(log2(diaSetSub1[,11:20]))

##roll into proteins
##read in the human index
annotationDb = readRDS(paste(baseRepository, '/databases/2024-04-24-reviewed-UP000005640-spikein.fasta_index_trypticPeps.rds',sep='')) %>%
  dplyr::select(-species) %>%
  dplyr::filter(!grepl('sp\\|V.*',gene))
#
diaSetPsms = diaSetSub1 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene, sample13_M:sample53_H) %>%
  dplyr::mutate(numPeps = 1) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise_at(c('numPeps'), sum, na.rm = TRUE)
#
diaSetAbundance = diaSetSub1 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene, sample13_M:sample53_H) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise_at(c(set4Names), median, na.rm = TRUE) %>%
  dplyr::left_join(diaSetPsms) %>%
  dplyr::left_join(annotationDb)

##save the data
saveRDS(diaSetAbundance, paste(baseRepository, '/dataProcessing/mb231-48h_parsedProteinData.rds', sep = ''))
write.table(diaSetAbundance, paste(baseRepository, '/dataProcessing/mb231-48h_parsedProteinData.tsv', sep = ''), 
            col.names = TRUE, row.names = FALSE, quote = FALSE, sep = '\t')

```

Process the MB231 + PMP 24h samples.

```{r}
##########################################################################################
##dia1
dia1 = read_tsv(paste(baseRepository, '/diannDia1/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia1)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia1)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia1)[11:85]),sep='')
##dia2
dia2 = read_tsv(paste(baseRepository, '/diannDia2/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia2)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia2)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia2)[11:85]),sep='')
##dia3
dia3 = read_tsv(paste(baseRepository, '/diannDia3/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia3)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia3)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia3)[11:85]),sep='')
##combine
diaSet = rbind(dia1, dia2, dia3) %>%
  dplyr::filter(!grepl(';',Protein.Group))

##keep only the labels of interest
diaSetSub1 = diaSet[,c(colnames(diaSet)[1:10],set3Names)]
diaSetSub1[,11:25][diaSetSub1[,11:25]==0] = NA
diaSetSub1$missingSet1 = rowSums(is.na(diaSetSub1[,11:15]))
diaSetSub1$missingSet2 = rowSums(is.na(diaSetSub1[,16:20]))
diaSetSub1$missingSet3 = rowSums(is.na(diaSetSub1[,16:20]))
diaSetSub1 = dplyr::filter(diaSetSub1, missingSet1 <= 2 | missingSet2 <=2 | missingSet3 <=2)
table(diaSetSub1$missing)
diaSetSub1[,11:25] = log2(diaSetSub1[,11:25])
boxplot(log2(diaSetSub1[,11:25]))

##roll into proteins
##read in the human index
annotationDb = readRDS(paste(baseRepository, '/databases/2024-04-24-reviewed-UP000005640-spikein.fasta_index_trypticPeps.rds',sep='')) %>%
  dplyr::select(-species) %>%
  dplyr::filter(!grepl('sp\\|V.*',gene))
#
diaSetPsms = diaSetSub1 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene, sample12_L:sample52_H) %>%
  dplyr::mutate(numPeps = 1) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise_at(c('numPeps'), sum, na.rm = TRUE)
#
diaSetAbundance = diaSetSub1 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene, sample12_L:sample52_H) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise_at(c(set3Names), median, na.rm = TRUE) %>%
  dplyr::left_join(diaSetPsms) %>%
  dplyr::left_join(annotationDb)

##save the data
saveRDS(diaSetAbundance, paste(baseRepository, '/dataProcessing/mb231-pmp-24h_parsedProteinData.rds', sep = ''))
write.table(diaSetAbundance, paste(baseRepository, '/dataProcessing/mb231-pmp-24h_parsedProteinData.tsv', sep = ''), 
            col.names = TRUE, row.names = FALSE, quote = FALSE, sep = '\t')

```

Process the MB231 + PMP 48h samples.

```{r}
##########################################################################################
##dia1
dia1 = read_tsv(paste(baseRepository, '/diannDia1/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia1)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia1)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia1)[11:85]),sep='')
##dia2
dia2 = read_tsv(paste(baseRepository, '/diannDia2/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia2)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia2)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia2)[11:85]),sep='')
##dia3
dia3 = read_tsv(paste(baseRepository, '/diannDia3/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia3)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia3)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia3)[11:85]),sep='')
##combine
diaSet = rbind(dia1, dia2, dia3) %>%
  dplyr::filter(!grepl(';',Protein.Group))

##keep only the labels of interest
diaSetSub1 = diaSet[,c(colnames(diaSet)[1:10],set5Names)]
diaSetSub1[,11:25][diaSetSub1[,11:25]==0] = NA
diaSetSub1$missingSet1 = rowSums(is.na(diaSetSub1[,11:15]))
diaSetSub1$missingSet2 = rowSums(is.na(diaSetSub1[,16:20]))
diaSetSub1$missingSet3 = rowSums(is.na(diaSetSub1[,16:20]))
diaSetSub1 = dplyr::filter(diaSetSub1, missingSet1 <= 2 | missingSet2 <=2 | missingSet3 <=2)
table(diaSetSub1$missing)
diaSetSub1[,11:25] = log2(diaSetSub1[,11:25])
boxplot(log2(diaSetSub1[,11:25]))

##roll into proteins
##read in the human index
annotationDb = readRDS(paste(baseRepository, '/databases/2024-04-24-reviewed-UP000005640-spikein.fasta_index_trypticPeps.rds',sep='')) %>%
  dplyr::select(-species) %>%
  dplyr::filter(!grepl('sp\\|V.*',gene))
#
diaSetPsms = diaSetSub1 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene, sample14_L:sample54_H) %>%
  dplyr::mutate(numPeps = 1) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise_at(c('numPeps'), sum, na.rm = TRUE)
#
diaSetAbundance = diaSetSub1 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene, sample14_L:sample54_H) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise_at(c(set5Names), median, na.rm = TRUE) %>%
  dplyr::left_join(diaSetPsms) %>%
  dplyr::left_join(annotationDb)

##save the data
saveRDS(diaSetAbundance, paste(baseRepository, '/dataProcessing/mb231-pmp-48h_parsedProteinData.rds', sep = ''))
write.table(diaSetAbundance, paste(baseRepository, '/dataProcessing/mb231-pmp-48h_parsedProteinData.tsv', sep = ''), 
            col.names = TRUE, row.names = FALSE, quote = FALSE, sep = '\t')

```

Compare medium between the two PMP+ samples at the 24h time point.

```{r}
##########################################################################################
##dia1
dia1 = read_tsv(paste(baseRepository, '/diannDia1/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia1)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia1)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia1)[11:85]),sep='')
##dia2
dia2 = read_tsv(paste(baseRepository, '/diannDia2/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia2)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia2)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia2)[11:85]),sep='')
##dia3
dia3 = read_tsv(paste(baseRepository, '/diannDia3/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia3)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia3)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia3)[11:85]),sep='')
##combine
diaSet = rbind(dia1, dia2, dia3) %>%
  dplyr::filter(!grepl(';',Protein.Group))

##keep only the labels of interest
diaSetSub1 = diaSet[,c(colnames(diaSet)[1:10],set2MedNames)]
diaSetSub1[,11:15][diaSetSub1[,11:15]==0] = NA
diaSetSub1$missing = rowSums(is.na(diaSetSub1[,11:15]))
diaSetSub1 = dplyr::filter(diaSetSub1, missing <= 2)
diaSetSub1[,11:15] = log2(diaSetSub1[,11:15])
boxplot(log2(diaSetSub1[,11:15]))
#
diaSetSub2 = diaSet[,c(colnames(diaSet)[1:10],set3MedNames)]
diaSetSub2[,11:15][diaSetSub2[,11:15]==0] = NA
diaSetSub2$missing = rowSums(is.na(diaSetSub2[,11:15]))
diaSetSub2 = dplyr::filter(diaSetSub2, missing <= 2)
diaSetSub2[,11:15] = log2(diaSetSub2[,11:15])
boxplot(log2(diaSetSub2[,11:15]))

##roll into proteins
##read in the human index
annotationDb = readRDS(paste(baseRepository, '/databases/2024-04-24-reviewed-UP000005640-spikein.fasta_index_trypticPeps.rds',sep='')) %>%
  dplyr::select(-species) %>%
  dplyr::filter(!grepl('sp\\|V.*',gene))
#
diaSetPsms1 = diaSetSub1 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene) %>%
  dplyr::mutate(psms = 1) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise(numPsmsSet1 = sum(psms, na.rm = TRUE))
#
diaSetPro1 = diaSetSub1 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene, sample11_M:sample51_M) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise_at(c(set2MedNames), median, na.rm = TRUE) %>%
  dplyr::left_join(diaSetPsms1)
#
diaSetPsms2 = diaSetSub2 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene) %>%
  dplyr::mutate(psms = 1) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise(numPsmsSet2 = sum(psms, na.rm = TRUE))
#
diaSetPro2 = diaSetSub2 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene, sample12_M:sample52_M) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise_at(c(set3MedNames), median, na.rm = TRUE) %>%
  dplyr::left_join(diaSetPsms2)

#
diaPro = dplyr::full_join(diaSetPro1, diaSetPro2) %>%
  dplyr::mutate(n_peptides = sum(numPsmsSet1, numPsmsSet2, na.rm = TRUE))


##perform the comparison
processedData = diaPro[,c(1:7,9:13)]
conditionsToCompare = c('2')
controlCondition = '1'
for (i in 1:length(conditionsToCompare)){
  dat = processedData[,c(which(names(processedData) == 'accession'),
                         which(names(processedData) == 'gene'),      
                         which(names(processedData) == paste('sample1', controlCondition, '_M', sep = '')),
                         which(names(processedData) == paste('sample2', controlCondition, '_M', sep = '')),
                         which(names(processedData) == paste('sample3', controlCondition, '_M', sep = '')),
                         which(names(processedData) == paste('sample4', controlCondition, '_M', sep = '')),
                         which(names(processedData) == paste('sample5', controlCondition, '_M', sep = '')),
                         which(names(processedData) == paste('sample1', conditionsToCompare[i], '_M', sep = '')),
                         which(names(processedData) == paste('sample2', conditionsToCompare[i], '_M', sep = '')),
                         which(names(processedData) == paste('sample3', conditionsToCompare[i], '_M', sep = '')),
                         which(names(processedData) == paste('sample4', conditionsToCompare[i], '_M', sep = '')),
                         which(names(processedData) == paste('sample5', conditionsToCompare[i], '_M', sep = '')))]
  dat$samples01234 = rowSums(is.na(dat[,3:7]))
  dat$samples56789 = rowSums(is.na(dat[,8:12]))
  colnames(dat)[3:7] = c('cont_rep1','cont_rep2','cont_rep3','cont_rep4','cont_rep5')
  colnames(dat)[8:12] = c('treat_rep1','treat_rep2','treat_rep3','treat_rep4','treat_rep5')
  #
  datFiltered = as.data.frame(dat) %>%
    dplyr::filter(samples01234 < 2 | samples56789 < 2) %>%
    dplyr::mutate(cont_rep1 = ifelse(samples01234 == 5, min(cont_rep1, na.rm = TRUE), cont_rep1),
                  cont_rep2 = ifelse(samples01234 == 5, min(cont_rep2, na.rm = TRUE), cont_rep2),
                  cont_rep3 = ifelse(samples01234 == 5, min(cont_rep3, na.rm = TRUE), cont_rep3),
                  cont_rep4 = ifelse(samples01234 == 5, min(cont_rep4, na.rm = TRUE), cont_rep4),
                  cont_rep5 = ifelse(samples01234 == 5, min(cont_rep5, na.rm = TRUE), cont_rep5)) %>%
    dplyr::mutate(treat_rep1 = ifelse(samples56789 == 5, min(treat_rep1, na.rm = TRUE), treat_rep1),
                  treat_rep2 = ifelse(samples56789 == 5, min(treat_rep2, na.rm = TRUE), treat_rep2),
                  treat_rep3 = ifelse(samples56789 == 5, min(treat_rep3, na.rm = TRUE), treat_rep3),
                  treat_rep4 = ifelse(samples56789 == 5, min(treat_rep4, na.rm = TRUE), treat_rep4),
                  treat_rep5 = ifelse(samples56789 == 5, min(treat_rep5, na.rm = TRUE), treat_rep5))
  #
  rownames(datFiltered) = datFiltered$accession
  dat.log = datFiltered %>%
    dplyr::select(-accession, -gene, -samples01234, -samples56789)
  #dat.log = na.omit(datFiltered)
  #boxplot(dat.log, las = 2, main = 'total protein abundance')
  
  ##make a design table
  cond = as.factor(c(rep('cont',5),
                    rep('treat',5)))
  design = model.matrix(~0+cond)
  colnames(design) = gsub('cond', '', colnames(design))
  
  ##make the contrasts
  x = c('treat-cont')
  contrast = makeContrasts(contrasts = x, levels = design)
  fit1 = lmFit(dat.log, design)
  fit2 = contrasts.fit(fit1, contrasts = contrast)
  fit3 = eBayes(fit2)

  ##add information about PSM counts
  forPsm = diaPro
  psm.count.table = data.frame(count = forPsm$n_peptides,
                               row.names = forPsm$accession)
  fit3$count = psm.count.table[rownames(fit3$coefficients),'count']
  fit4 = spectraCounteBayes(fit3)
  #VarianceBoxplot(fit4, n = 30, main = 'total proteome dataset', xlab = 'psm count')
  #VarianceScatterplot(fit4, main = 'total proteome dataset')
  
  ##extract the data
  #head(fit4$coefficients)
  psmAnnotate = dplyr::select(forPsm, accession, gene, n_peptides)
  valuesAnnotate = dplyr::select(datFiltered, accession, gene, samples01234, samples56789) %>%
    dplyr::rename(controlValues = 'samples01234',
                  conditionValues = 'samples56789')
  deqmsResults = tibble(outputResult(fit4, coef_col = 1)) %>%
    dplyr::rename(accession = 'gene') %>%
    dplyr::left_join(psmAnnotate) %>%
    dplyr::left_join(annotationDb) %>%
    dplyr::left_join(valuesAnnotate)
  #
  saveRDS(deqmsResults, paste(baseRepository, '/dataProcessing/dataset_deqms_', conditionsToCompare[i], '-', controlCondition, '.rds', sep = ''))
  write.table(deqmsResults, paste(baseRepository, '/dataProcessing/dataset_deqms_', conditionsToCompare[i], '-', controlCondition, '.tsv', sep = ''),
              col.names = TRUE, row.names = FALSE, sep = '\t', quote = FALSE)
}
```

Compare medium between the two PMP+ samples at the 48h time point.

```{r}
##########################################################################################
##dia1
dia1 = read_tsv(paste(baseRepository, '/diannDia1/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia1)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia1)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia1)[11:85]),sep='')
##dia2
dia2 = read_tsv(paste(baseRepository, '/diannDia2/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia2)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia2)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia2)[11:85]),sep='')
##dia3
dia3 = read_tsv(paste(baseRepository, '/diannDia3/report.pr_matrix_channels_translated.tsv', sep=''), show_col_types = FALSE)
colnames(dia3)[11:85] = paste(sub('.*Synthesis_(.*)_dia.*', '\\1', colnames(dia3)[11:85]),'_',sub('.*raw\\-(.*)', '\\1', colnames(dia3)[11:85]),sep='')
##combine
diaSet = rbind(dia1, dia2, dia3) %>%
  dplyr::filter(!grepl(';',Protein.Group))

##keep only the labels of interest
diaSetSub1 = diaSet[,c(colnames(diaSet)[1:10],set4MedNames)]
diaSetSub1[,11:15][diaSetSub1[,11:15]==0] = NA
diaSetSub1$missing = rowSums(is.na(diaSetSub1[,11:15]))
diaSetSub1 = dplyr::filter(diaSetSub1, missing <= 2)
diaSetSub1[,11:15] = log2(diaSetSub1[,11:15])
boxplot(log2(diaSetSub1[,11:15]))
#
diaSetSub2 = diaSet[,c(colnames(diaSet)[1:10],set5MedNames)]
diaSetSub2[,11:15][diaSetSub2[,11:15]==0] = NA
diaSetSub2$missing = rowSums(is.na(diaSetSub2[,11:15]))
diaSetSub2 = dplyr::filter(diaSetSub2, missing <= 2)
diaSetSub2[,11:15] = log2(diaSetSub2[,11:15])
boxplot(log2(diaSetSub2[,11:15]))

##roll into proteins
##read in the human index
annotationDb = readRDS(paste(baseRepository, '/databases/2024-04-24-reviewed-UP000005640-spikein.fasta_index_trypticPeps.rds',sep='')) %>%
  dplyr::select(-species) %>%
  dplyr::filter(!grepl('sp\\|V.*',gene))
#
diaSetPsms1 = diaSetSub1 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene) %>%
  dplyr::mutate(psms = 1) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise(numPsmsSet1 = sum(psms, na.rm = TRUE))
#
diaSetPro1 = diaSetSub1 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene, sample13_M:sample53_M) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise_at(c(set4MedNames), median, na.rm = TRUE) %>%
  dplyr::left_join(diaSetPsms1)
#
diaSetPsms2 = diaSetSub2 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene) %>%
  dplyr::mutate(psms = 1) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise(numPsmsSet2 = sum(psms, na.rm = TRUE))
#
diaSetPro2 = diaSetSub2 %>%
  dplyr::rename(accession = 'Protein.Group',
                gene = 'Genes') %>%
  dplyr::select(accession, gene, sample14_M:sample54_M) %>%
  dplyr::group_by(accession, gene) %>%
  dplyr::summarise_at(c(set5MedNames), median, na.rm = TRUE) %>%
  dplyr::left_join(diaSetPsms2)

#
diaPro = dplyr::full_join(diaSetPro1, diaSetPro2) %>%
  dplyr::mutate(n_peptides = sum(numPsmsSet1, numPsmsSet2, na.rm = TRUE))


##perform the comparison
processedData = diaPro[,c(1:7,9:13)]
conditionsToCompare = c('4')
controlCondition = '3'
for (i in 1:length(conditionsToCompare)){
  dat = processedData[,c(which(names(processedData) == 'accession'),
                         which(names(processedData) == 'gene'),      
                         which(names(processedData) == paste('sample1', controlCondition, '_M', sep = '')),
                         which(names(processedData) == paste('sample2', controlCondition, '_M', sep = '')),
                         which(names(processedData) == paste('sample3', controlCondition, '_M', sep = '')),
                         which(names(processedData) == paste('sample4', controlCondition, '_M', sep = '')),
                         which(names(processedData) == paste('sample5', controlCondition, '_M', sep = '')),
                         which(names(processedData) == paste('sample1', conditionsToCompare[i], '_M', sep = '')),
                         which(names(processedData) == paste('sample2', conditionsToCompare[i], '_M', sep = '')),
                         which(names(processedData) == paste('sample3', conditionsToCompare[i], '_M', sep = '')),
                         which(names(processedData) == paste('sample4', conditionsToCompare[i], '_M', sep = '')),
                         which(names(processedData) == paste('sample5', conditionsToCompare[i], '_M', sep = '')))]
  dat$samples01234 = rowSums(is.na(dat[,3:7]))
  dat$samples56789 = rowSums(is.na(dat[,8:12]))
  colnames(dat)[3:7] = c('cont_rep1','cont_rep2','cont_rep3','cont_rep4','cont_rep5')
  colnames(dat)[8:12] = c('treat_rep1','treat_rep2','treat_rep3','treat_rep4','treat_rep5')
  #
  datFiltered = as.data.frame(dat) %>%
    dplyr::filter(samples01234 < 2 | samples56789 < 2) %>%
    dplyr::mutate(cont_rep1 = ifelse(samples01234 == 5, min(cont_rep1, na.rm = TRUE), cont_rep1),
                  cont_rep2 = ifelse(samples01234 == 5, min(cont_rep2, na.rm = TRUE), cont_rep2),
                  cont_rep3 = ifelse(samples01234 == 5, min(cont_rep3, na.rm = TRUE), cont_rep3),
                  cont_rep4 = ifelse(samples01234 == 5, min(cont_rep4, na.rm = TRUE), cont_rep4),
                  cont_rep5 = ifelse(samples01234 == 5, min(cont_rep5, na.rm = TRUE), cont_rep5)) %>%
    dplyr::mutate(treat_rep1 = ifelse(samples56789 == 5, min(treat_rep1, na.rm = TRUE), treat_rep1),
                  treat_rep2 = ifelse(samples56789 == 5, min(treat_rep2, na.rm = TRUE), treat_rep2),
                  treat_rep3 = ifelse(samples56789 == 5, min(treat_rep3, na.rm = TRUE), treat_rep3),
                  treat_rep4 = ifelse(samples56789 == 5, min(treat_rep4, na.rm = TRUE), treat_rep4),
                  treat_rep5 = ifelse(samples56789 == 5, min(treat_rep5, na.rm = TRUE), treat_rep5))
  #
  rownames(datFiltered) = datFiltered$accession
  dat.log = datFiltered %>%
    dplyr::select(-accession, -gene, -samples01234, -samples56789)
  #dat.log = na.omit(datFiltered)
  #boxplot(dat.log, las = 2, main = 'total protein abundance')
  
  ##make a design table
  cond = as.factor(c(rep('cont',5),
                    rep('treat',5)))
  design = model.matrix(~0+cond)
  colnames(design) = gsub('cond', '', colnames(design))
  
  ##make the contrasts
  x = c('treat-cont')
  contrast = makeContrasts(contrasts = x, levels = design)
  fit1 = lmFit(dat.log, design)
  fit2 = contrasts.fit(fit1, contrasts = contrast)
  fit3 = eBayes(fit2)

  ##add information about PSM counts
  forPsm = diaPro
  psm.count.table = data.frame(count = forPsm$n_peptides,
                               row.names = forPsm$accession)
  fit3$count = psm.count.table[rownames(fit3$coefficients),'count']
  fit4 = spectraCounteBayes(fit3)
  #VarianceBoxplot(fit4, n = 30, main = 'total proteome dataset', xlab = 'psm count')
  #VarianceScatterplot(fit4, main = 'total proteome dataset')
  
  ##extract the data
  #head(fit4$coefficients)
  psmAnnotate = dplyr::select(forPsm, accession, gene, n_peptides)
  valuesAnnotate = dplyr::select(datFiltered, accession, gene, samples01234, samples56789) %>%
    dplyr::rename(controlValues = 'samples01234',
                  conditionValues = 'samples56789')
  deqmsResults = tibble(outputResult(fit4, coef_col = 1)) %>%
    dplyr::rename(accession = 'gene') %>%
    dplyr::left_join(psmAnnotate) %>%
    dplyr::left_join(annotationDb) %>%
    dplyr::left_join(valuesAnnotate)
  #
  saveRDS(deqmsResults, paste(baseRepository, '/dataProcessing/dataset_deqms_', conditionsToCompare[i], '-', controlCondition, '.rds', sep = ''))
  write.table(deqmsResults, paste(baseRepository, '/dataProcessing/dataset_deqms_', conditionsToCompare[i], '-', controlCondition, '.tsv', sep = ''),
              col.names = TRUE, row.names = FALSE, sep = '\t', quote = FALSE)
}
```












This is older code.

Read in data from DIA-NN and process with the IQ package.

```{r}
##########################################################################################
##first we can filter and parse the report data into a better format for IQ
dia1 = read_tsv(paste(baseRepository, '/diannDia1/report.tsv',sep=''), show_col_types = FALSE) %>%
  dplyr::mutate(File.Name = sub('.*240418_1164_breastCancerSynthesis_(.*)_dia[123]\\.raw', '\\1', File.Name)) %>%
  dplyr::filter(!grepl(';', Protein.Group))
#
dia2 = read_tsv(paste(baseRepository, '/diannDia2/report.tsv',sep=''), show_col_types = FALSE) %>%
  dplyr::mutate(File.Name = sub('.*240418_1164_breastCancerSynthesis_(.*)_dia[123]\\.raw', '\\1', File.Name)) %>%
  dplyr::filter(!grepl(';', Protein.Group))
#
dia3 = read_tsv(paste(baseRepository, '/diannDia3/report.tsv',sep=''), show_col_types = FALSE) %>%
  dplyr::mutate(File.Name = sub('.*240418_1164_breastCancerSynthesis_(.*)_dia[123]\\.raw', '\\1', File.Name)) %>%
  dplyr::filter(!grepl(';', Protein.Group))

##read in the human index
annotationDb = readRDS(paste(baseRepository, '/databases/2024-04-24-reviewed-UP000005640-spikein.fasta_index_trypticPeps.rds',sep='')) %>%
  dplyr::select(-species) %>%
  dplyr::filter(!grepl('sp\\|V.*',gene))

##loop over the labels
labelName = c('light','medium','heavy')
labelString = c('-L','-M','-H')
#
for (i in 1:length(labelName)){
  
  ##write the table data
  raw = rbind(dplyr::filter(dia1, grepl(labelString[i], Modified.Sequence)),
              dplyr::filter(dia2, grepl(labelString[i], Modified.Sequence)),
              dplyr::filter(dia3, grepl(labelString[i], Modified.Sequence)))
  write.table(raw, paste(baseRepository,'/dataProcessing/',labelName[i],'_combinedFilteredReportAnnotated.tsv',sep=''), 
            col.names = TRUE, row.names = FALSE, quote = FALSE, sep = '\t')
  
  ##run the IQ analysis
  iqResult = process_long_format(paste(baseRepository,'/dataProcessing/',labelName[i],'_combinedFilteredReportAnnotated.tsv',sep=''), 
                           output_filename = paste(baseRepository,'/dataProcessing/',labelName[i],'combinedFilteredReportAnnotatedIq.tsv',sep=''),
                           annotation_col = 'Genes',
                           normalization = 'median',
                           filter_double_less = c("Lib.Q.Value" = "0.01", "Lib.PG.Q.Value" = "0.01"),
                           peptide_extractor = function(x) gsub("[0-9].*$", "", x))
  
  ##parse the IQ result
  proData = read_tsv(paste(baseRepository,'/dataProcessing/',labelName[i],'combinedFilteredReportAnnotatedIq.tsv',sep=''), show_col_types = FALSE) %>%
    dplyr::rename(accession = 'Protein.Group') %>%
    dplyr::select(-Genes) %>%
    dplyr::left_join(annotationDb)
  
  ##save the data
  saveRDS(proData, paste(baseRepository, '/dataProcessing/',labelName[i],'_parsedProteinData.rds', sep = ''))
  write.table(proData, paste(baseRepository, '/dataProcessing/',labelName[i],'_parsedProteinData.tsv', sep = ''), 
            col.names = TRUE, row.names = FALSE, quote = FALSE, sep = '\t')

}
```

Perform differential expression analysis on these data.

```{r}
##########################################################################################
##I am going to do one-by-one comparisons
processedData = readRDS(paste(baseRepository, '/dataProcessing/parsedProteinData.rds', sep = ''))
#conditionsToCompare = c('B10','DC')
#controlCondition = 'B1'
conditionsToCompare = c('B10')
controlCondition = 'DC'
for (i in 1:length(conditionsToCompare)){
  dat = processedData[,c(which(names(processedData) == 'accession'),
                         which(names(processedData) == 'gene'),      
                         which(names(processedData) == paste('M1-', controlCondition, sep = '')),
                         which(names(processedData) == paste('M2-', controlCondition, sep = '')),
                         which(names(processedData) == paste('M3-', controlCondition, sep = '')),
                         which(names(processedData) == paste('M4-', controlCondition, sep = '')),
                         which(names(processedData) == paste('M1-', conditionsToCompare[i], sep = '')),
                         which(names(processedData) == paste('M2-', conditionsToCompare[i], sep = '')),
                         which(names(processedData) == paste('M3-', conditionsToCompare[i], sep = '')),
                         which(names(processedData) == paste('M4-', conditionsToCompare[i], sep = '')))]
  dat$samples1234 = rowSums(is.na(dat[,3:6]))
  dat$samples5678 = rowSums(is.na(dat[,7:10]))
  colnames(dat)[3:6] = c('cont_rep1','cont_rep2','cont_rep3','cont_rep4')
  colnames(dat)[7:10] = c('treat_rep1','treat_rep2','treat_rep3','treat_rep4')
  #
  datFiltered = as.data.frame(dat) %>%
    dplyr::filter(samples1234 < 2 | samples5678 < 2) %>%
    dplyr::mutate(cont_rep1 = ifelse(samples1234 == 4, min(cont_rep1, na.rm = TRUE), cont_rep1),
                  cont_rep2 = ifelse(samples1234 == 4, min(cont_rep2, na.rm = TRUE), cont_rep2),
                  cont_rep3 = ifelse(samples1234 == 4, min(cont_rep3, na.rm = TRUE), cont_rep3),
                  cont_rep4 = ifelse(samples1234 == 4, min(cont_rep4, na.rm = TRUE), cont_rep4)) %>%
    dplyr::mutate(treat_rep1 = ifelse(samples5678 == 4, min(treat_rep1, na.rm = TRUE), treat_rep1),
                  treat_rep2 = ifelse(samples5678 == 4, min(treat_rep2, na.rm = TRUE), treat_rep2),
                  treat_rep3 = ifelse(samples5678 == 4, min(treat_rep3, na.rm = TRUE), treat_rep3),
                  treat_rep4 = ifelse(samples5678 == 4, min(treat_rep4, na.rm = TRUE), treat_rep4))
  #
  rownames(datFiltered) = datFiltered$accession
  dat.log = datFiltered %>%
    dplyr::select(-accession, -gene, -samples1234, -samples5678)
  #dat.log = na.omit(datFiltered)
  #boxplot(dat.log, las = 2, main = 'total protein abundance')
  
  ##make a design table
  cond = as.factor(c(rep('cont',4),
                    rep('treat',4)))
  design = model.matrix(~0+cond)
  colnames(design) = gsub('cond', '', colnames(design))
  
  ##make the contrasts
  x = c('treat-cont')
  contrast = makeContrasts(contrasts = x, levels = design)
  fit1 = lmFit(dat.log, design)
  fit2 = contrasts.fit(fit1, contrasts = contrast)
  fit3 = eBayes(fit2)

  ##add information about PSM counts
  forPsm = processedData
  psm.count.table = data.frame(count = forPsm$n_peptides,
                               row.names = forPsm$accession)
  fit3$count = psm.count.table[rownames(fit3$coefficients),'count']
  fit4 = spectraCounteBayes(fit3)
  #VarianceBoxplot(fit4, n = 30, main = 'total proteome dataset', xlab = 'psm count')
  #VarianceScatterplot(fit4, main = 'total proteome dataset')
  
  ##extract the data
  #head(fit4$coefficients)
  psmAnnotate = dplyr::select(forPsm, accession, gene, n_fragments, n_peptides)
  valuesAnnotate = dplyr::select(datFiltered, accession, gene, samples1234, samples5678) %>%
    dplyr::rename(controlValues = 'samples1234',
                  conditionValues = 'samples5678')
  deqmsResults = tibble(outputResult(fit4, coef_col = 1)) %>%
    dplyr::rename(accession = 'gene') %>%
    dplyr::left_join(psmAnnotate) %>%
    dplyr::left_join(annotationDb) %>%
    dplyr::left_join(valuesAnnotate)
  #
  saveRDS(deqmsResults, paste(baseRepository, '/dataProcessing/dataset_deqms_', conditionsToCompare[i], '-', controlCondition, '.rds', sep = ''))
  write.table(deqmsResults, paste(baseRepository, '/dataProcessing/dataset_deqms_', conditionsToCompare[i], '-', controlCondition, '.tsv', sep = ''),
              col.names = TRUE, row.names = FALSE, sep = '\t', quote = FALSE)
  
  ##create a plot of the data
  #create the plot and save it
  goi = c('YBX1')
  plotData = deqmsResults %>%
    dplyr::mutate(pColors = ifelse(logFC > 0.5, brewer.pal(4,'OrRd')[4],
                                   ifelse(logFC < -0.5, brewer.pal(4,'GnBu')[4], brewer.pal(3,'Greys')[2]))) %>%
    dplyr::mutate(pText = ifelse(gene %in% goi, gene, ''))
  #
  ggplot(plotData, aes(logFC, -log10(sca.P.Value))) +
    geom_point(size = 0.5, color = plotData$pColors) +
    labs(x = paste('log2(',conditionsToCompare[i],'-',controlCondition,')',sep=''), y = '-log10(p-value)', title = 'Differential abundance') +
    #geom_text_repel(label = plotData$pText, min.segment.length = unit(0, 'lines'), nudge_x = 1, nudge_y = 1, max.overlaps = 55000, size = 2, segment.size = 0.25) +
    scale_x_continuous(limits = c(-6,6), breaks = seq(-20,20,2)) +
    scale_y_continuous(limits = c(0,20), breaks = seq(0,60,5)) +
    geom_vline(xintercept = c(-0.5,0.5), linetype = 'dashed') +
    geom_hline(yintercept = -log10(0.01), linetype = 'dashed') +
    theme_classic()
  ggsave(paste(baseRepository, '/dataProcessing/scatter_deqms_', conditionsToCompare[i], '-', controlCondition, '.pdf', sep = ''),
         height = 2, width = 2, useDingbats = FALSE)
}
```

---
title: "Drug compound optimization"
author: "Christopher Hughes"
format: html
---

## Details

This document describes processing the output from Skyline related to optimization of drug compounds.

## Setting up the environment

These are packages you will need for this notebook. For exact versions used, please refer to the session info at the bottom of this notebook.

```{r}
#| message: false
#| warning: false
##########################################################################################
library('tidyverse')
library('ggpmisc')
#library('pastecs')
```

I want to set a base directory that we can use for our analysis.

```{r}
##########################################################################################
baseRepository = 'E:/requests/1169/241211_1169_qtrap'
```

## Data processing

The raw data have already been processed and integrated in Skyline. From here, we will use these data for downstream analyses. The first thing to do is to extract the standard data and create the standard curves.

```{r}
##########################################################################################
##read in the data from Skyline
standards = rep(c(25,12.5,6.25,3.125,1.5625,0.78125,0),each = 3) #in ug/mL
skyRaw = read_csv(paste(baseRepository,'/skyline/moleculeTransitionResults.csv',sep=''),show_col_types = FALSE) %>%
  dplyr::filter(`Product Mz` == 121.1 | `Product Mz` == 60.1) %>%
  dplyr::filter(grepl('standard',`Replicate Name`)) %>%
  dplyr::select(`Replicate Name`, `Precursor Mz`, `Product Mz`, Area, Background) %>%
  dplyr::rename(sampleName = `Replicate Name`,
                parentMass = `Precursor Mz`,
                fragmentMass = `Product Mz`,
                signal = 'Area',
                noise = 'Background') %>%
  dplyr::mutate(concentration = rep(standards,6)) %>%
  dplyr::mutate(sampleType = ifelse(parentMass == 292.0, 'experimentalSample', 
                                    ifelse(grepl('blank',sampleName),'blank','ilis')),
                sampleSet = ifelse(grepl('A[0-9]',sampleName),'setA',
                                   ifelse(grepl('B[0-9]',sampleName),'setB',
                                          ifelse(grepl('C[0-9]',sampleName),'setC','blank')))) %>%
  dplyr::mutate(sampleReplicate = sub('.*_rep(.*)','\\1',sampleName)) %>%
  dplyr::mutate(sampleNumber = sub('standard_[ABC](.*)_rep.*','\\1',sampleName)) %>%
  dplyr::filter(!grepl('E', sampleNumber))


##reshape the data
skyWide = skyRaw %>%
  tidyr::pivot_wider(id_cols = c('sampleName','sampleSet','sampleNumber','sampleReplicate'), names_from = 'sampleType', values_from = 'signal') %>%
  dplyr::mutate(relativeToIlis = experimentalSample/ilis)


#save the data
saveRDS(skyWide, paste(baseRepository,'/dataProcessing/dataset_processedStandardData.rds',sep=''))
write.table(skyWide, paste(baseRepository,'/dataProcessing/dataset_processedStandardData.tsv',sep=''),
            sep = '\t', quote = FALSE, row.names = FALSE)
```

Plot the different standard curves.

```{r}
##########################################################################################
##read in the processed data
standards = rep(c(0.78125,1.5625,3.125,6.25,12.5,25),each = 3) #in ug/mL
stdData = readRDS(paste(baseRepository,'/dataProcessing/dataset_processedStandardData.rds',sep='')) %>%
  dplyr::select(sampleNumber, sampleSet, sampleReplicate, experimentalSample, relativeToIlis) %>%
  dplyr::mutate(sampleConcentration = rep(standards,3))


##setA
dat = dplyr::filter(stdData, grepl('setA',sampleSet))
ggplot(dat, aes(sampleConcentration, experimentalSample)) +
  stat_poly_line(formula = y ~ poly(x,2)) +
  stat_poly_eq(formula = y ~ poly(x,2), use_label(c("eq", "R2")),rr.digits = 6) +
  geom_point(shape = 21, stroke = 1, size = 2) + 
  #stat_smooth(method = "loess", formula = y~x, linewidth = 1) +
  #stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1) +
  labs(x = 'Standard Concentration (ug/mL)', y = 'Area', title = 'Set A Linearity') +
  theme_classic()
ggsave(paste(baseRepository,'/dataProcessing/point_standardCurve_setA.png',sep=''),
       width = 6, height = 6)


##setB
dat = dplyr::filter(stdData, grepl('setB',sampleSet))
ggplot(dat, aes(sampleConcentration, experimentalSample)) +
  stat_poly_line(formula = y ~ poly(x,2)) +
  stat_poly_eq(formula = y ~ poly(x,2), use_label(c("eq", "R2")),rr.digits = 6) +
  geom_point(shape = 21, stroke = 1, size = 2) + 
  labs(x = 'Standard Concentration (ug/mL)', y = 'Area', title = 'Set B Linearity') +
  theme_classic()
ggsave(paste(baseRepository,'/dataProcessing/point_standardCurve_setB.png',sep=''),
       width = 6, height = 6)


##setB
dat = dplyr::filter(stdData, grepl('setB',sampleSet) & sampleNumber != 4) #sample number 4 was messed up so I excluded it for now
ggplot(dat, aes(sampleConcentration, experimentalSample)) +
  stat_poly_line(formula = y ~ poly(x,2)) +
  stat_poly_eq(formula = y ~ poly(x,2), use_label(c("eq", "R2")),rr.digits = 6) +
  geom_point(shape = 21, stroke = 1, size = 2) + 
  labs(x = 'Standard Concentration (ug/mL)', y = 'Area', title = 'Set B Linearity') +
  theme_classic()
ggsave(paste(baseRepository,'/dataProcessing/point_standardCurve_setB_sample4Excluded.png',sep=''),
       width = 6, height = 6)

##setC
dat = dplyr::filter(stdData, grepl('setC',sampleSet))
ggplot(dat, aes(sampleConcentration, experimentalSample)) +
  stat_poly_line(formula = y ~ poly(x,2)) +
  stat_poly_eq(formula = y ~ poly(x,2), use_label(c("eq", "R2")),rr.digits = 6) +
  geom_point(shape = 21, stroke = 1, linewidth = 2) + 
  labs(x = 'Standard Concentration (ug/mL)', y = 'Area', title = 'Set C Linearity') +
  theme_classic()
ggsave(paste(baseRepository,'/dataProcessing/point_standardCurve_setC.png',sep=''),
       width = 6, height = 6)
```

Calculate the matrix effect (ME), recovery (RE), and process efficiency (PE).

```{r}
##########################################################################################
##read in the processed data
standards = rep(c(0.78125,1.5625,3.125,6.25,12.5,25),each = 3) #in ug/mL
meData = readRDS(paste(baseRepository,'/dataProcessing/dataset_processedStandardData.rds',sep='')) %>%
  dplyr::select(sampleNumber, sampleSet, sampleReplicate, sample) %>%
  tidyr::pivot_wider(id_cols = c('sampleNumber','sampleReplicate'), names_from = 'sampleSet', values_from = 'sample') %>%
  dplyr::mutate(ME = (setC / setA)*100,
                RE = (setB / setC)*100,
                PE = (ME * RE)/100) %>%
  dplyr::mutate(standardConcentration = standards) %>%
  dplyr::group_by(sampleNumber, standardConcentration) %>%
  dplyr::summarise(setA = mean(setA), setB = mean(setB), setC = mean(setC), ME = mean(ME), RE = mean(RE), PE = mean(PE))
meData

#
write.table(meData, paste(baseRepository,'/dataProcessing/dataset_efficiencyData.tsv',sep=''),
            sep = '\t', quote = FALSE, row.names = FALSE)
```

Use these equations to determine the concentration of the unknowns.

```{r}
##########################################################################################
##get the unknown data
dilutionFactor = 200
xValue = 0.0131 #taken from setB standard curve
yValue = -0.0391 #taken from setB standard curve

unkData = read_csv(paste(baseRepository,'/skyline/moleculeTransitionResults.csv',sep=''),show_col_types = FALSE) %>%
  dplyr::filter(`Product Mz` == 111.01 | `Product Mz` == 113.02) %>%
  dplyr::filter(grepl('Unknown',`Replicate Name`)) %>%
  dplyr::select(`Replicate Name`, `Product Mz`, Area, Background) %>%
  dplyr::rename(sampleName = `Replicate Name`,
                fragmentMass = `Product Mz`,
                signal = 'Area',
                noise = 'Background') %>%
  dplyr::mutate(sampleType = ifelse(fragmentMass == 111.01, 'sample', 
                                    ifelse(grepl('blank',sampleName),'blank','ilis'))) %>%
  dplyr::mutate(sampleReplicate = sub('.*_rep(.*)','\\1',sampleName)) %>%
  dplyr::mutate(sampleNumber = sub('.*Unknown(.*)_prm.*','\\1',sampleName)) %>%
  dplyr::mutate(sampleSet = paste('unknown',sampleNumber,sep='')) %>%
  tidyr::pivot_wider(id_cols = c('sampleName','sampleSet','sampleNumber','sampleReplicate'), names_from = 'sampleType', values_from = 'signal') %>%
  dplyr::mutate(relativeToIlis = sample/ilis) %>%
  dplyr::mutate(concentration = (((relativeToIlis - yValue)/xValue)*dilutionFactor)/1000) #this result is in uM, so need to adjust by 1000 to mM

#
unkSummary = unkData %>%
  dplyr::group_by(sampleSet) %>%
  dplyr::summarise(concentrationMean = mean(concentration), concentrationSD = sd(concentration))

#
write.table(unkData, paste(baseRepository,'/dataProcessing/dataset_unknownRawData.tsv',sep=''),
            sep = '\t', quote = FALSE, row.names = FALSE)
write.table(unkSummary, paste(baseRepository,'/dataProcessing/dataset_unknownDataSummary.tsv',sep=''),
            sep = '\t', quote = FALSE, row.names = FALSE)
#
unkData
unkSummary
```


Calculate the original concentrations for the standards based on the standard curve data.

```{r}
##########################################################################################
##get the standard data
#equation from corrected B curve y = 1.02e7 + 2.63e7x - 5.83e6x2
yValue = -0.0391 #taken from setB standard curve
standards = rep(c(0.78125,1.5625,3.125,6.25,12.5,25),each = 3) #in ug/mL

stdData = readRDS(paste(baseRepository,'/dataProcessing/dataset_processedStandardData.rds',sep='')) %>%
  dplyr::select(sampleNumber, sampleSet, sampleReplicate, experimentalSample) %>%
  dplyr::mutate(sampleConcentration = rep(standards,3)) %>%
  dplyr::filter(sampleSet == 'setB') %>%
  dplyr::mutate(cValue = 1.02e7 - experimentalSample,
                aValue = -5.83e6,
                bSquared = (2.63e7)^2,
                twoA = 2*(-5.83e6)) %>%
  dplyr::mutate(b24ac = bSquared - (4*aValue*cValue)) %>%
  dplyr::mutate(sqB24ac = sqrt(b24ac)) %>%
  dplyr::mutate(solution1 = (-2.63e7 + sqB24ac)/twoA,
                solution2 = (-2.63e7 - sqB24ac)/twoA) %>%
  dplyr::mutate(check1 = 1.02e7 + (2.63e7 * solution1) - (5.83e6 * (solution1)^2))
  


dplyr::mutate(calcConcentration = (relativeToIlis - yValue)/xValue) %>%
  dplyr::mutate(acc = (calcConcentration/sampleConcentration)*100) %>%
  dplyr::group_by(sampleNumber, sampleSet, sampleConcentration) %>%
  dplyr::summarise(mean_acc = mean(acc, na.rm = TRUE), sd_acc = sd(acc, na.rm = TRUE)) %>%
  dplyr::mutate(cv = (sd_acc/mean_acc)*100)

#
write.table(stdData, paste(baseRepository,'/dataProcessing/dataset_accuracyData.tsv',sep=''),
            sep = '\t', quote = FALSE, row.names = FALSE)
```

Plot the QC samples to look at performance as the run batch was moving along.

```{r}
##########################################################################################
##read in the processed data
sscData = read_csv(paste(baseRepository,'/skyline/moleculeTransitionResults.csv',sep=''),show_col_types = FALSE) %>% 
  dplyr::filter(`Product Mz` == 111.01 | `Product Mz` == 113.02) %>%
  dplyr::filter(grepl('SSC_new',`Replicate Name`)) %>%
  dplyr::select(`Replicate Name`, `Product Mz`, Area, Background) %>%
  dplyr::rename(sampleName = `Replicate Name`,
                fragmentMass = `Product Mz`,
                signal = 'Area',
                noise = 'Background') %>%
  dplyr::mutate(sampleType = ifelse(fragmentMass == 111.01, 'sample', 
                                    ifelse(grepl('blank',sampleName),'blank','ilis'))) %>%
  dplyr::mutate(sampleReplicate = sub('.*_rep(.*)','\\1',sampleName)) %>%
  dplyr::mutate(sampleSet = paste('ssc',sampleReplicate,sep='')) %>%
  tidyr::pivot_wider(id_cols = c('sampleName','sampleSet','sampleReplicate'), names_from = 'sampleType', values_from = 'signal') %>%
  dplyr::mutate(relativeToIlis = sample/ilis)

#
write.table(sscData, paste(baseRepository,'/dataProcessing/dataset_systemSuitabilityStandardData.tsv',sep=''),
            sep = '\t', quote = FALSE, row.names = FALSE)

##plot
dat = sscData %>%
  dplyr::mutate(sampleSet = factor(sampleSet, levels = c(paste('ssc',seq(1,15,1),sep=''))))
ggplot(dat, aes(sampleSet, relativeToIlis)) +
  geom_point(shape = 21, stroke = 1, size = 2) + 
  labs(x = 'SSC Run Number', y = 'Area Relative to Internal Standard', title = 'System Suitability Standard Performance') +
  scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.1)) +
  theme_classic()
ggsave(paste(baseRepository,'/dataProcessing/point_sscTimecourse.png',sep=''),
       width = 6, height = 6)
```

Prepare the QC data to look at signal drop off across days. 

```{r}
##########################################################################################
##read in the processed data
standards = rep(c(0,500,31.25,125),each = 9) #in uM
xValue = 0.0131 #taken from setB standard curve
yValue = -0.0391 #taken from setB standard curve

##
qcData = read_csv(paste(baseRepository,'/skyline/moleculeTransitionResults.csv',sep=''),show_col_types = FALSE) %>% 
  dplyr::filter(`Product Mz` == 111.01 | `Product Mz` == 113.02) %>%
  dplyr::filter(grepl('Qc',`Replicate Name`)) %>%
  dplyr::select(`Replicate Name`, `Product Mz`, Area, Background) %>%
  dplyr::rename(sampleName = `Replicate Name`,
                fragmentMass = `Product Mz`,
                signal = 'Area',
                noise = 'Background') %>%
  dplyr::mutate(preparedConcentration = rep(standards,2)) %>%
  dplyr::mutate(sampleType = ifelse(fragmentMass == 111.01, 'sample', 
                                    ifelse(grepl('blank',sampleName),'blank','ilis')),
                sampleSet = ifelse(grepl('Empty',sampleName),'empty',
                                   ifelse(grepl('High',sampleName),'high',
                                          ifelse(grepl('Low',sampleName),'low','medium')))) %>%
  dplyr::mutate(sampleReplicate = sub('.*_rep(.*)','\\1',sampleName)) %>%
  dplyr::mutate(sampleNumber = sub('sampleQc(.*)_prm.*','\\1',sampleName)) %>%
  tidyr::pivot_wider(id_cols = c('sampleName','sampleSet','sampleNumber','sampleReplicate','preparedConcentration'), names_from = 'sampleType', values_from = 'signal') %>%
  dplyr::mutate(relativeToIlis = sample/ilis) %>%
  dplyr::mutate(calculatedConcentration = (relativeToIlis - yValue)/xValue) %>% #this result is in uM
  dplyr::mutate(accuracy = (calculatedConcentration/preparedConcentration)*100)
  

#
write.table(qcData, paste(baseRepository,'/dataProcessing/dataset_qcRawData.tsv',sep=''),
            sep = '\t', quote = FALSE, row.names = FALSE)

#compare with the expected concentrations
qcDataSummary = qcData %>%
  dplyr::group_by(sampleNumber, sampleSet, preparedConcentration) %>%
  dplyr::summarise(mean_accuracy = mean(accuracy, na.rm = TRUE), sd_accuracy = sd(accuracy, na.rm = TRUE)) %>%
  dplyr::mutate(cv = (sd_accuracy/mean_accuracy)*100)

#
write.table(qcDataSummary, paste(baseRepository,'/dataProcessing/dataset_qcDataSummary.tsv',sep=''),
            sep = '\t', quote = FALSE, row.names = FALSE)
```























